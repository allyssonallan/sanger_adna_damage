name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.8"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Check code formatting with black
      run: black --check src tests run_tests.py setup.py

    - name: Run linting (non-blocking for existing issues)
      run: |
        echo "Running flake8 with current baseline..."
        # Count current issues for tracking improvement
        flake8 src tests --count --statistics --tee --output-file=flake8-report.txt || true
        echo "Flake8 report generated. Current issues documented."
        
        # Only fail on critical errors that should block CI
        echo "Checking for critical errors only..."
        flake8 src tests --select=E9,F63,F7,F82 --show-source

    - name: Run critical linting checks (blocking)
      run: |
        echo "Running strict checks on new/modified test files..."
        # Apply strict linting only to test files to maintain quality
        flake8 tests/ --select=E,W,F --ignore=W293,W291,E402,F401,C901 --max-complexity=20

    - name: Upload linting report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: flake8-report
        path: flake8-report.txt

  smoke-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run smoke tests
      run: python run_tests.py --mode smoke

    - name: Run import tests
      run: python run_tests.py --mode imports
