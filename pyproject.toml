[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "sanger-adna-damage"
description = "Sanger sequencing analysis pipeline with ancient DNA damage assessment"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Allysson Allan", email = "allyssonallan@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
requires-python = ">=3.8"
dependencies = [
    "click>=8.0",
    "pyyaml>=6.0",
    "numpy>=1.20",
    "matplotlib>=3.5",
    "pandas>=1.3",
    "biopython>=1.78",  # Compatible with Python 3.8+
    "scipy>=1.7",
]
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "pytest-mock>=3.0",
    "black>=22.0",
    "flake8>=5.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-xdist>=3.0",
    "pytest-mock>=3.0",
]

[project.scripts]
sanger-pipeline = "sanger_pipeline.cli.main:cli"

[project.urls]
Homepage = "https://github.com/allyssonallan/sanger_adna_damage"
Repository = "https://github.com/allyssonallan/sanger_adna_damage"
Documentation = "https://allyssonallan.github.io/sanger_adna_damage"
"Bug Tracker" = "https://github.com/allyssonallan/sanger_adna_damage/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"sanger_pipeline" = ["config/*.yaml", "templates/*.html"]

[tool.setuptools_scm]
write_to = "src/sanger_pipeline/_version.py"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--tb=short",
    "--cov=src/sanger_pipeline",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=25",  # Realistic for bioinformatics pipeline with file dependencies
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_external: marks tests that require external dependencies",
    "requires_data: marks tests that require test data files",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
    # Bioinformatics pipeline exclusions - require specific input files
    "*/scripts/*",  # Scripts requiring AB1/FASTA files
    "*/utils/plotting/*",  # Plotting utilities requiring matplotlib backend
    "*/utils/report_components/*",  # Report generation requiring templates
    "*/utils/*_converter.py",  # File format converters requiring specific inputs
    "*/utils/*hsd*",  # HSD-specific utilities requiring reference files
    "*/analysis/*",  # Analysis modules requiring aligned sequences
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    # Bioinformatics-specific exclusions
    "except ImportError:",  # Optional dependencies
    "if not.*installed:",  # External tool checks
    "print.*Error.*not installed",  # Tool installation messages
]
precision = 2
show_missing = true
skip_covered = false

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | docs/_build
)/
'''

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "Bio.*",
    "matplotlib.*",
    "pandas.*",
    "numpy.*",
]
ignore_missing_imports = true

# Flake8 linting (via setup.cfg for now, as flake8 doesn't support pyproject.toml yet)
# See setup.cfg for flake8 configuration
